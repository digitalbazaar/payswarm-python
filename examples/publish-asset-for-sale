#!/usr/bin/env python
#
# Example of how to create and publish an asset for sale.
import sys
sys.path.insert(0, '../../pyld/lib')
sys.path.insert(0, '../lib')

from datetime import datetime
import json
from optparse import OptionParser
import os.path
import payswarm
import time
from dateutil.relativedelta import relativedelta

USAGE = """%prog

Creates and publishes a PaySwarm asset for sale.

************** %prog command line options **************"""

asset_id = str(hex(int(round(time.time() * 1000))))[2:-1]
default_config = \
    os.path.expanduser(os.path.join('~', '.config', 'payswarm1', 'default'))
DEFAULTS = \
{ \
    'authority': 'https://dev.payswarm.com/', \
    'asset_name': 'Test Asset ' + asset_id, \
    'config_name': default_config, \
    'price': '0.05', \
    'listing_service': 'http://listings.dev.payswarm.com/', \
}

def _parse_options():
    """Get options from command line and return them."""
    parser = OptionParser(usage=USAGE)
    parser.add_option(
        '-a', '--authority', action='store', dest='authority',
        default=DEFAULTS['authority'],
        help='The PaySwarm Authority URL. '
        '[default: %default]')
    parser.add_option(
        '-c', '--config', action='store', dest='config_name',
        default=DEFAULTS['config_name'], 
        help='The PaySwarm configuration name or file to use. '
        '[default: %default]')
    parser.add_option(
        '-n', '--asset-name', action='store', dest='asset_name',
        default=DEFAULTS['asset_name'],
        help='The name of the asset. '
        '[default: %default]')
    parser.add_option(
        '-p', '--price', action='store', dest='price',
        default=DEFAULTS['price'],
        help='The price to charge for the asset. '
        '[default: %default]')
    parser.add_option(
        '-l', '--listing-service', action='store', dest='listing_service',
        default=DEFAULTS['listing_service'],
        help='The Listing Service URL. '
        '[default: %default]')

    options, args = parser.parse_args()
    options.args = args

    return options

def publish_asset_for_sale(options):
    # generate the asset and listing validity dates (use the same ones in
    # this simple example, but an asset may have a validity range that is
    # larger than the listing's)
    
    # validity dates are from right now, to a year from right now 
    valid_from = payswarm.w3c_date(time.mktime(time.gmtime()))
    valid_until = payswarm.w3c_date(time.mktime(time.gmtime()) + 31536000)
  
    # To publish an asset for sale, the following steps must be performed:
    #
    # 1. Create and digitally sign the asset.
    # 2. Create and digitally sign the listing.
    # 3. Publish the asset and listing data to the Web.
    psc = payswarm.PaySwarmClient()
    psc.load_config(options.config_name)
    config = psc.get_config()

    # Step #1: Create the asset and digitally sign it
    print('Generating asset...')
    asset_url = options.listing_service + 'payswarm-python/' + asset_id
    asset = { \
        '@context': 'https://w3id.org/payswarm/v1',
        'id': asset_url + '#asset',
        'type': ['Asset', 'pto:WebPage'],
        'creator': { \
            'fullName': 'Python publish-asset-for-sale Example' \
        },
        'title': options.asset_name,
        'assetContent': asset_url,
        'assetProvider': config['owner'],
        'listingRestrictions': { \
            'valid_from': valid_from,
            'valid_until': valid_until,
            'payee': [{ \
                'id': asset_url + '#asset-payee-1',
                'type': 'Payee',
                'destination': config['source'],
                'currency': 'USD',
                'payeeGroup': ['assetProvider'],
                'payeeRate': '80',
                'payeeRateType': 'Percentage',
                'payeeApplyType': 'ApplyInclusively',
                'payeeApplyGroup': ['vendor'],
                'minimumAmount': '0.01',
                'comment': 'Asset Provider Royalty' \
            }],
            'payeeRule': [{ \
                'type': 'PayeeRule',
                'payeeGroupPrefix': ['authority'] \
            }, { \
                'type': 'PayeeRule',
                'payeeGroup': ['vendor'],
                'payeeRateType': 'FlatAmount',
                'payeeApplyType': 'ApplyExclusively' \
            }] \
        } \
    }

    # sign the asset
    print('Signing the asset...')
    signed_asset = psc.sign(asset)
    asset_hash = psc.hash(signed_asset)
                                    
    # Step #2: Create and digitally sign the listing
    print('Generating and signing listing...')
    listing_url = options.listing_service + 'payswarm-python/' + asset_id
    listing = { \
        '@context': 'https://w3id.org/payswarm/v1',
        'id': listing_url + '#listing',
        'type': ['Listing', 'gr:Offering'],
        'vendor': config['owner'],
        'payee': [{
            'id': listing_url + '#listing-payee-1',
            'type': 'Payee',
            'destination': config['source'],
            'currency': 'USD',
            'payeeGroup': ['vendor'],
            'payeeRate': options.price,
            'payeeRateType': 'FlatAmount',
            'payeeApplyType': 'ApplyExclusively',
            'comment': 'Payment for selling Test Asset ' + asset_id + '.'
        }],
        'payeeRule': [{
            'type': 'PayeeRule',
            'payeeGroupPrefix': ['authority'],
            'maximumPayeeRate': '10',
            'payeeRateType': 'Percentage',
            'payeeApplyType': 'ApplyInclusively'
        }],
        'asset': listing_url + '#asset',
        'assetHash': asset_hash,
        'license': 'https://w3id.org/payswarm/licenses/blogging',
        'licenseHash': 'urn:sha256:' +
          'd9dcfb7b3ba057df52b99f777747e8fe0fc598a3bb364e3d3eb529f90d58e1b9',
        'valid_from': valid_from,
        'valid_until': valid_until \
    }

    # sign the listing
    signed_listing = psc.sign(listing)
    
    # Step #3: Publish the signed asset and listing
    print('Register signed asset and listing...')
    asset_and_listing = { \
        '@context': 'https://w3id.org/payswarm/v1',
        '@graph': [signed_asset, signed_listing] \
    }

    #publish_url = signed_listing.id.split('#')[0];
    #psc.post(publish_url, asset_and_listing)

    # display publication details
    #print('Registered signed asset:\n   ' +
    #    asset_and_listing['@graph'][0].id + '\n' +
    #    'Registered signed listing:\n   ' +
    #    asset_and_listing['@graph'][1].id)

if __name__ == '__main__':
    options = _parse_options()
    
    publish_asset_for_sale(options)
