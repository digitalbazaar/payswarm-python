#!/usr/bin/env python
#
# Performs a number of PaySwarm client commands.
import sys
sys.path.insert(0, "lib")
sys.path.insert(0, "../pyld/lib")

import hashlib
import json
from optparse import OptionParser
import os
import payswarm
import time

USAGE = """%prog [OPTIONS] COMMAND ...

Performs a variety of PaySwarm client operations such as registering 
with a PaySwarm Authority, generating public/private keys, digitally 
signing and registering assets for sale, registering listings, 
establishing Payment Sessions and performing purchases.

Examples:
   %prog config             [Configure a number of PaySwarm defaults]
   %prog register LISTING   [Register a listing to be purchased]
   %prog purchase LISTING   [Perform a purchase using the client]

************** %prog command line options **************"""

DEFAULTS = \
{ \
    "config-url": "https://dev.payswarm.com/client-config", \
    "listings-url": "http://listings.dev.payswarm.com/" \
}

def _parse_options():
    """Get options from command line and return them."""
    parser = OptionParser(usage=USAGE)
    parser.add_option(
        "--config-url", action="store", dest="config-url",
        default=DEFAULTS["config-url"], 
        help="The PaySwarm Authority client configuration URL. "
        "[Default: %default]")
    parser.add_option(
        "--listings-url", action="store", dest="listings-url",
        default=DEFAULTS["listings-url"], 
        help="URL for Web Service that stores assets and listings. "
        "[Default: %default]")
    parser.add_option(
        "-c", "--config", action="store",
        default=None, 
        help="The configuration file to read in addition to the regular "
        "configuration files. "
        "[Default: %default]")

    options, args = parser.parse_args()
    options.args = args

    # Check to make sure that there are enough options
    if(not options.args):
        sys.stderr.write( \
            "ERROR: You must provide at least one command to execute.\n")
        parser.print_help()
        sys.exit(1)

    return options

def _ask(question, config=None, section=None, name=None):
    """Asks a question on the command line using a default value if one exists.

    question - the question to ask on the command line.
    config - the configuration to read the default values from.
    section - the section containing the option to store.
    name - the name of the option to store."""
    rval = ""
    default = ""

    # Check to see if there is a default value for the option
    if(config != None and config.has_option(section, name)):
        default = config.get(section, name)

    # Attempt to get the option from the command line
    while(not rval):
        if(default):
            sys.stdout.write(question + " [Default: %s] " % default)
            sys.stdout.flush()
            rval = sys.stdin.readline().strip()
            if(not rval):
                rval = default
        else:
            sys.stdout.write(question + " ")
            sys.stdout.flush()
            rval = sys.stdin.readline().strip()
            if(not rval):
                sys.stdout.write("Warning: You must enter something.\n")
                sys.stdout.flush()

    return rval

def _configure(config):
    """Performs basic PaySwarm client configuration.

    Asks a number of questions on the command line, contacts the PaySwarm
    Authority and configures all OAuth tokens and public/private keys.
    """
    sys.stdout.write("""
In order to fully configure this PaySwarm client, you will need to use a
Web Browser. Go to the following URL and create an Application profile:

https://dev.payswarm.com/profile/applications

""")
    # Get the registration token and secret
    client_id = _ask("Application client ID?", 
        config, "application", "client-id")
    secret = _ask("Application secret?",
        config, "application", "client-secret")
    payswarm.config.set_oauth_credentials(config, client_id, secret)

    # Retrieve the basic PaySwarm endpoints
    sys.stdout.write( \
        "Retrieving basic OAuth web service endpoints...\n")
    payswarm.config.set_basic_endpoints(config)

    # Authorize the registration token
    client = payswarm.PaySwarmClient(config, client_id, secret)
    url = client.generate_registration_url()
    sys.stdout.write( \
        "Go to the following URL and authorize your application:\n\n"
        "   %s\n\n" % url)
    verifier = _ask("Enter the verification key:")
    client.complete_registration(verifier)

    # Retrieve the specialized application endpoints
    sys.stdout.write( \
        "Retrieving PaySwarm web service endpoints...\n")
    payswarm.config.set_application_endpoints(client, config)

    # Retrieve the application preferences
    sys.stdout.write( \
        "Retrieving application owner's PaySwarm account details...\n")
    payswarm.config.set_application_preferences(client, config)

    sys.stdout.write("Generating public/private keypair...\n")
    sys.stdout.flush()
    payswarm.config.generate_keys(config)

    sys.stdout.write("Registering public key with PaySwarm Authority...\n")
    sys.stdout.flush()
    client.register_public_key()

    sys.stdout.write("Configuration complete.\n")
    payswarm.config.save(config)

def _register(config, lfilename):
    """Registers a given listing on the listing service.

    config - the configuration object to get the listing service URL from.
    lfilename - the filename containing the listing data.
    """

    # Read the asset and listing data from the given file
    try:
        lfile = open(lfilename, "r")
        ldata = json.loads(lfile.read())
        asset = ldata[0]
        listing = ldata[1]

        # Register the loaded asset
        sys.stdout.write("Registering asset:")
        signed_asset = payswarm.storage.register_asset(config, asset)
        sys.stdout.write(" %s\n" % signed_asset["@subject"])
        
        # Register the loaded listing
        sys.stdout.write("Registering listing:")
        signed_listing = payswarm.storage.register_listing(\
            config, signed_asset, listing)
        sys.stdout.write(" %s\n" % signed_listing["@subject"])
    except ValueError, e:
        sys.stderr.write("Error: Failed to parse %s as JSON-LD\n" % lfilename)
        sys.stderr.write(str(e) + "\n")

def _establish_payment_session(config, client):
    """Requests a new Payment Session with the PaySwarm Authority.
    
    client - the OAuth client to use to establish the session.
    
    Returns True if a session was established, False otherwise.
    """
    rval = False
    
    # Authorize the payment token, thus establishing a payment session
    client.clear_token()
    url = client.generate_payment_session_url()
    sys.stdout.write( \
        "Go to the following URL and authorize the Payment Session:\n\n"
        "   %s\n\n" % url)
    verifier = _ask("Enter the verification key:")
    client.authorize_payment_session(verifier)
    payswarm.config.save(config)
    rval = True
        
    return rval

def _purchase(config, lfilename):
    """Performs PaySwarm purchase given a config and listing filename.

    config - the configuration to use when configuring the PaySwarm client.
    lfilename - the name of the listing file to use when generating the
        purchase request.
    """
    client_id = config.get("application", "client-id")
    client_secret = config.get("application", "client-secret")
    client = payswarm.PaySwarmClient(config, client_id, client_secret)

    # ensure that there is an active payment session in place
    if(not config.has_option("client", "payment-token") or  \
        not config.has_option("client", "payment-token-secret")):
        _establish_payment_session(config, client)
    else:
        client.set_token(config.get("client", "payment-token"),
            config.get("client", "payment-token-secret"))

    # read the listing information from the file
    lfile = open(lfilename, "r")
    ldata = json.loads(lfile.read())
    asset = payswarm.storage.fetch(config, ldata[0])
    listing = payswarm.storage.fetch(config, ldata[1])

    # calculate the listing hash from the retrieved listing
    # FIXME: The issue with calculating the listing hash in this way is
    # that an invalid listing hash will never be a possibility. The
    # listing hash will always be valid, even if it is changed without
    # the client's knowledge, which could result in a purchase of 
    # something that the client didn't intend to purchase.
    listing_url = listing["@subject"]
    listing_hash = \
        hashlib.sha1(json.dumps(payswarm.jsonld.normalize(listing), sort_keys=True, separators=(',',':'))).hexdigest()
    
    # attempt to purchase the listing up to 3 times
    attempts = 0 
    max_attempts = 3
    purchase_success = False
    while(not purchase_success and attempts < max_attempts):
        try:
            purchase = client.purchase(listing_url, listing_hash)
            purchase_success = True
            
            # display the item purchased and remaining balance
            if(purchase["authorized"] == "true"):
                sys.stdout.write("Purchase of '%s' successful.\n" % \
                    (asset["dc:title"],))
                sys.stdout.write("$%s remaining for session.\n" % \
                    (purchase["balance"],))
        except Exception, e:
            sys.stderr.write("Error: %s" % e)
            attempts += 1
            # if there was an error, re-establish a payment session
            if(attempts < max_attempts):
                _establish_payment_session(config, client)

if __name__ == "__main__":
    # Get the options from the command line
    options = _parse_options()

    # Get configuration options from /etc/payswarm1.cfg and ~/.payswarm1
    config = payswarm.config.parse(DEFAULTS, options)

    for command in options.args:
        if(command == "config"):
            _configure(config)
        elif(command == "register"):
            if(options.args[-1].endswith(".jsonld")):
                _register(config, options.args[-1])
            else:
                sys.stderr.write("Error: You must specify a listing file "
                    "ending in .jsonld to register\n")
        elif(command == "purchase"):
            if(options.args[-1].endswith(".jsonld")):
                _purchase(config, options.args[-1])
            else:
                sys.stderr.write("Error: You must specify a listing file "
                    "ending in .jsonld for the purchase.\n")
        elif(command == "receipt"):
            pass

