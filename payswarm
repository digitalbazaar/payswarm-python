#!/usr/bin/env python
#
# Performs a number of PaySwarm client commands.
import sys
sys.path.insert(0, "lib")

from optparse import OptionParser
import os
import payswarm
import time

USAGE = """%prog [OPTIONS] COMMAND ...

Performs a variety of PaySwarm client operations such as registering 
with a PaySwarm Authority, generating public/private keys, digitally 
signing and registering assets for sale, registering listings, 
establishing Payment Sessions and performing purchases.

Examples:
   %prog config             [Configure a number of PaySwarm defaults]
   %prog register           [Register the PaySwarm client]
   %prog purchase LISTING   [Perform a purchase using the client]
   %prog receipt  LISTING   [Retrieve a contract for a previous purchase]

************** %prog command line options **************"""

DEFAULTS = \
{ \
    "config-url": "https://dev.payswarm.com/client-config" \
}

def _parse_options():
    """Get options from command line and return them."""
    parser = OptionParser(usage=USAGE)
    parser.add_option(
        "--config-url", action="store", dest="config-url",
        default=DEFAULTS["config-url"], 
        help="The PaySwarm Authority client configuration URL."
        "[Default: %default]")
    parser.add_option(
        "-c", "--config", action="store",
        default=None, 
        help="The configuration file to read in addition to the regular "
        "configuration files. "
        "[Default: %default]")

    options, args = parser.parse_args()
    options.args = args

    # Check to make sure that there are enough options
    if(len(options.args) < 1):
        sys.stderr.write( \
            "ERROR: You must provide at least one command to execute.\n")
        parser.print_help()
        sys.exit(1)

    return options

def _ask(question, config=None, section=None, name=None):
    """Asks a question on the command line using a default value if one exists.

    question - the question to ask on the command line.
    config - the configuration to read the default values from.
    section - the section containing the option to store.
    name - the name of the option to store."""
    rval = ""
    default = ""

    # Check to see if there is a default value for the option
    if(config != None and config.has_option(section, name)):
        default = config.get(section, name)

    # Attempt to get the option from the command line
    while(len(rval) < 1):
        if(len(default) > 0):
            sys.stdout.write(question + " [Default: %s] " % default)
            sys.stdout.flush()
            rval = sys.stdin.readline().strip()
            if(len(rval) < 1):
                rval = default
        else:
            sys.stdout.write(question + " ")
            sys.stdout.flush()
            rval = sys.stdin.readline().strip()
            if(len(rval) < 1):
                sys.stdout.write("Warning: You must enter something.\n")
                sys.stdout.flush()

    return rval

def _configure(config):
    """Performs basic PaySwarm client configuration by asking a few questions.
    """
    sys.stdout.write("""
In order to fully configure this PaySwarm client, you will need to use a
Web Browser. Go to the following URL and create an Application profile:

https://dev.payswarm.com/profile/clients

""")
    # Get the registration token and secret
    client_id = _ask("Application client ID?", 
        config, "general", "application-client-id")
    secret = _ask("Application secret?",
        config, "general", "application-secret")
    payswarm.config.set_oauth_credentials(config, client_id, secret)

    # Retrieve the basic PaySwarm endpoints
    sys.stdout.write( \
        "Retrieving PaySwarm Authority web service endpoints...\n")
    payswarm.config.set_basic_endpoints(config)

    # Authorize the registration token
    client = payswarm.PaySwarmClient(config, client_id, secret)
    url = client.generate_registration_url()
    sys.stdout.write( \
        "Go to the following URL and authorize your application:\n\n"
        "   %s\n\n" % url)
    verifier = _ask("Enter the verification key:")
    client.complete_registration(verifier)

    # Retrieve the specialized application endpoints
    sys.stdout.write( \
        "Retrieving application owner's PaySwarm account details...\n")
    payswarm.config.set_application_endpoints(client, config)

    # Retrieve the application preferences
    sys.stdout.write( \
        "Retrieving application owner's PaySwarm account details...\n")
    payswarm.config.set_application_preferences(client, config)

    sys.stdout.write("Generating public/private keypair...\n")
    sys.stdout.flush()
    payswarm.config.generate_keys(config)

    sys.stdout.write("Registering public key with PaySwarm Authority...\n")
    sys.stdout.flush()
    client.register_public_key()

    sys.stdout.write("Configuration complete.\n")
    payswarm.config.save(config)

if __name__ == "__main__":
    # Get the options from the command line
    options = _parse_options()

    # Get configuration options from /etc/payswarm1.cfg and ~/.payswarm1
    config = payswarm.config.parse(DEFAULTS, options)

    for command in options.args:
        if(command == "config"):
            _configure(config)
        elif(command == "register"):
            pass
        elif(command == "purchase"):
            pass
        elif(command == "receipt"):
            pass

