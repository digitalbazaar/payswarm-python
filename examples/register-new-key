#!/usr/bin/env python
#
# Example of how to create and register a new public/private keypair.
import sys
sys.path.insert(0, '../../pyld/lib')
sys.path.insert(0, '../lib')

import json
from optparse import OptionParser
import payswarm

USAGE = """%(prog)s

Creates and registers a new PaySwarm access key with a PaySwarm Authority.

************** %(prog)s command line options **************"""

DEFAULTS = \
{ \
    'authority': 'https://dev.payswarm.com/', \
}

def _parse_options():
    """Get options from command line and return them."""
    parser = OptionParser(usage=USAGE)
    parser.add_option(
        '-a', '--authority', action='store', dest='authority',
        default=DEFAULTS['authority'],
        help='The PaySwarm Authority URL. '
        '[Default: %(default)s]')
    parser.add_option(
        '-c', '--config', action='store', default=None, dest='config_name',
        help='The PaySwarm configuration name or file to use.'
        '[Default: %(default)s]')

    options, args = parser.parse_args()
    options.args = args

    return options

def register_new_key(options):
    # To register a key, the following steps must be performed:
    # 1. Generate a public/private keypair (or use an existing one). 
    # 2. Fetch the Web Keys registration endpoint from the PaySwarm Authority. 
    # 3. Generate the key registration URL and go to it in a browser. 
    # 4. Get the new key information and provide it to the program.
    psc = payswarm.PaySwarmClient()
    
    try:
        psc.load_config(options.config_name)
    except payswarm.ConfigException, e:
        print(e)
        pass
    
    # Step #1: Generate a public/private keypair (or use an existing one).
    if not psc.has_keys():
        print('Generating new public/private keypair...')
        psc.create_key_pair()
        psc.write_config(options.config_name)

    # Step #2: Fetch the Web Keys endpoint from the PaySwarm Authority.
    psc.load_web_keys_config(options.authority)

    # Step #3: Generate the key registration URL
    registration_url = psc.get_registration_url()
    
    print('\nTo register your new key, go to this URL using a Web browser:\n')
    print(registration_url + '\n')

    data = str(input('Then, enter the encrypted registration message: '))
    
    encrypted_message = {}
    try:
        encrypted_message = json.loads(data)
    except Exception, e:
        print("Error: The encrypted message was corrupt: " + str(e))
        pass

    message = psc.decrypt(encrypted_message)

    # Step #4: Get the new key information and write it to the config file
    config_updates = {}
    config_updates['publicKey'] = {}
    config_updates['publicKey']['id'] = message['publicKey']
    config_updates['owner'] = message['owner']
    config_updates['source'] = message['destination']

    psc.write_config(options.config_name)
    
    print('Completed registration of new public key:')
    print('   Public Key Owner : ' + config_updates['owner'])
    print('   Financial Account: ' + config_updates['source'])
    print('   Public Key URL   : ' + config_updates['publicKey']['id'])

if __name__ == '__main__':
    options = _parse_options()
    
    register_new_key(options)
